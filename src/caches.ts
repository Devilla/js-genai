/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

export class Caches extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  list = async (
    config?: types.ListCachedContentsConfig,
  ): Promise<Pager<types.CachedContent>> => {
    return new Pager<types.CachedContent>(
      PagedItem.PAGED_ITEM_CACHED_CONTENTS,
      this.listInternal,
      await this.listInternal(config),
      config,
    );
  };

  async create(
    model: string,
    config?: types.CreateCachedContentConfig,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = createCachedContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        undefined,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = createCachedContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        undefined,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  async get(
    name: string,
    config?: types.GetCachedContentConfig,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['name'] = name;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = getCachedContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, undefined, config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = getCachedContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, undefined, config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  async delete(
    name: string,
    config?: types.DeleteCachedContentConfig,
  ): Promise<types.DeleteCachedContentResponse> {
    let response: Promise<types.DeleteCachedContentResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['name'] = name;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = deleteCachedContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.delete(
        path,
        body,
        types.DeleteCachedContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = deleteCachedContentResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.DeleteCachedContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = deleteCachedContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.delete(
        path,
        body,
        types.DeleteCachedContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = deleteCachedContentResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.DeleteCachedContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }

  async update(
    name: string,
    config?: types.UpdateCachedContentConfig,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['name'] = name;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = updateCachedContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.patch(
        path,
        body,
        undefined,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = updateCachedContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.patch(
        path,
        body,
        undefined,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  private async listInternal(
    config?: types.ListCachedContentsConfig,
  ): Promise<types.ListCachedContentsResponse> {
    let response: Promise<types.ListCachedContentsResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = listCachedContentsParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(
        path,
        body,
        types.ListCachedContentsResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = listCachedContentsResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.ListCachedContentsResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = listCachedContentsParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(
        path,
        body,
        types.ListCachedContentsResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = listCachedContentsResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.ListCachedContentsResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }
}

function partToMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {
    throw new Error('videoMetadata parameter is not supported in Gemini API.');
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

function partToVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

/** @internal */
export function contentToMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

/** @internal */
export function contentToVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

function schemaToMldev(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['minItems']) !== undefined) {
    throw new Error('minItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['example']) !== undefined) {
    throw new Error('example parameter is not supported in Gemini API.');
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {
    throw new Error('pattern parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minimum']) !== undefined) {
    throw new Error('minimum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['default']) !== undefined) {
    throw new Error('default parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['anyOf']) !== undefined) {
    throw new Error('anyOf parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {
    throw new Error('maxLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['title']) !== undefined) {
    throw new Error('title parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {
    throw new Error('minLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {
    throw new Error('minProperties parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxItems']) !== undefined) {
    throw new Error('maxItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maximum']) !== undefined) {
    throw new Error('maximum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['nullable']) !== undefined) {
    throw new Error('nullable parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {
    throw new Error('maxProperties parameter is not supported in Gemini API.');
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function schemaToVertex(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);
  if (fromMinItems !== undefined) {
    common.setValueByPath(toObject, ['minItems'], fromMinItems);
  }

  const fromExample = common.getValueByPath(fromObject, ['example']);
  if (fromExample !== undefined) {
    common.setValueByPath(toObject, ['example'], fromExample);
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  const fromPattern = common.getValueByPath(fromObject, ['pattern']);
  if (fromPattern !== undefined) {
    common.setValueByPath(toObject, ['pattern'], fromPattern);
  }

  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);
  if (fromMinimum !== undefined) {
    common.setValueByPath(toObject, ['minimum'], fromMinimum);
  }

  const fromDefault = common.getValueByPath(fromObject, ['default']);
  if (fromDefault !== undefined) {
    common.setValueByPath(toObject, ['default'], fromDefault);
  }

  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);
  if (fromAnyOf !== undefined) {
    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);
  }

  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);
  if (fromMaxLength !== undefined) {
    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (fromTitle !== undefined) {
    common.setValueByPath(toObject, ['title'], fromTitle);
  }

  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);
  if (fromMinLength !== undefined) {
    common.setValueByPath(toObject, ['minLength'], fromMinLength);
  }

  const fromMinProperties = common.getValueByPath(fromObject, [
    'minProperties',
  ]);
  if (fromMinProperties !== undefined) {
    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);
  }

  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);
  if (fromMaxItems !== undefined) {
    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);
  }

  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);
  if (fromMaximum !== undefined) {
    common.setValueByPath(toObject, ['maximum'], fromMaximum);
  }

  const fromNullable = common.getValueByPath(fromObject, ['nullable']);
  if (fromNullable !== undefined) {
    common.setValueByPath(toObject, ['nullable'], fromNullable);
  }

  const fromMaxProperties = common.getValueByPath(fromObject, [
    'maxProperties',
  ]);
  if (fromMaxProperties !== undefined) {
    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function functionDeclarationToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['response']) !== undefined) {
    throw new Error('response parameter is not supported in Gemini API.');
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function functionDeclarationToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromResponse = common.getValueByPath(fromObject, ['response']);
  if (fromResponse !== undefined) {
    common.setValueByPath(
      toObject,
      ['response'],
      schemaToVertex(apiClient, fromResponse, toObject),
    );
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function googleSearchToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function googleSearchToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function dynamicRetrievalConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function dynamicRetrievalConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function googleSearchRetrievalToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToMldev(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function googleSearchRetrievalToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToVertex(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

/** @internal */
export function toolToMldev(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations!.map((item: any) => {
        return functionDeclarationToMldev(apiClient, item, toObject);
      }),
    );
  }

  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {
    throw new Error('retrieval parameter is not supported in Gemini API.');
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToMldev(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToMldev(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

/** @internal */
export function toolToVertex(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations!.map((item: any) => {
        return functionDeclarationToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);
  if (fromRetrieval !== undefined) {
    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToVertex(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToVertex(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

function functionCallingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames !== undefined) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function functionCallingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames !== undefined) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function toolConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToMldev(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function toolConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToVertex(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function createCachedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (parentObject !== undefined && fromExpireTime !== undefined) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (parentObject !== undefined && fromDisplayName !== undefined) {
    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (parentObject !== undefined && fromContents !== undefined) {
    common.setValueByPath(
      parentObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToMldev(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToMldev(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      fromTools!.map((item: any) => {
        return toolToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig !== undefined) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToMldev(apiClient, fromToolConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (parentObject !== undefined && fromExpireTime !== undefined) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (parentObject !== undefined && fromDisplayName !== undefined) {
    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (parentObject !== undefined && fromContents !== undefined) {
    common.setValueByPath(
      parentObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToVertex(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      fromTools!.map((item: any) => {
        return toolToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig !== undefined) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToVertex(apiClient, fromToolConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['model'],
      t.tCachesModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      createCachedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['model'],
      t.tCachesModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      createCachedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function getCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GetCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function getCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GetCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function deleteCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function deleteCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function updateCachedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (parentObject !== undefined && fromExpireTime !== undefined) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  return toObject;
}

function updateCachedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (parentObject !== undefined && fromExpireTime !== undefined) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  return toObject;
}

function updateCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      updateCachedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function updateCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      updateCachedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listCachedContentsConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (parentObject !== undefined && fromPageSize !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (parentObject !== undefined && fromPageToken !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listCachedContentsConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (parentObject !== undefined && fromPageSize !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (parentObject !== undefined && fromPageToken !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listCachedContentsParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      listCachedContentsConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listCachedContentsParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      listCachedContentsConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function cachedContentFromMldev(
  apiClient: ApiClient,
  fromObject: types.CachedContent,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (fromExpireTime !== undefined) {
    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function cachedContentFromVertex(
  apiClient: ApiClient,
  fromObject: types.CachedContent,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (fromExpireTime !== undefined) {
    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function deleteCachedContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function deleteCachedContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function listCachedContentsResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromCachedContents = common.getValueByPath(fromObject, [
    'cachedContents',
  ]);
  if (fromCachedContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['cachedContents'],
      fromCachedContents!.map((item: any) => {
        return cachedContentFromMldev(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function listCachedContentsResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromCachedContents = common.getValueByPath(fromObject, [
    'cachedContents',
  ]);
  if (fromCachedContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['cachedContents'],
      fromCachedContents!.map((item: any) => {
        return cachedContentFromVertex(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}
