/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

export class Models extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  generateContent = async (
    model: string,
    contents: types.ContentListUnion,
    config?: types.GenerateContentConfig,
  ): Promise<types.GenerateContentResponse> => {
    return await this._generateContent(model, contents, config);
  };

  generateContentStream = async (
    model: string,
    contents: types.ContentListUnion,
    config?: types.GenerateContentConfig,
  ): Promise<AsyncGenerator<types.GenerateContentResponse>> => {
    return await this._generateContentStream(model, contents, config);
  };

  private async _generateContent(
    model: string,
    contents: types.ContentListUnion,
    config?: types.GenerateContentConfig,
  ): Promise<types.GenerateContentResponse> {
    let response: Promise<types.GenerateContentResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['contents'] = contents;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = generateContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{model}:generateContent', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.GenerateContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = generateContentResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.GenerateContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = generateContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{model}:generateContent', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.GenerateContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = generateContentResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.GenerateContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }

  private async _generateContentStream(
    model: string,
    contents: types.ContentListUnion,
    config?: types.GenerateContentConfig,
  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {
    let response: Promise<AsyncGenerator<types.GenerateContentResponse>>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['contents'] = contents;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = generateContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap(
        '{model}:streamGenerateContent?alt=sse',
        body['_url'],
      );
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.postStream(
        path,
        body,
        types.GenerateContentResponse,
        config?.httpOptions,
      );

      let apiClient = this.apiClient;
      return response.then(async function* (apiResponse: any) {
        for await (const chunk of apiResponse) {
          const resp = generateContentResponseFromVertex(apiClient, chunk);
          let typed_resp = new types.GenerateContentResponse();
          Object.assign(typed_resp, resp);
          yield typed_resp;
        }
      });
    } else {
      body = generateContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap(
        '{model}:streamGenerateContent?alt=sse',
        body['_url'],
      );
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.postStream(
        path,
        body,
        types.GenerateContentResponse,
        config?.httpOptions,
      );

      const apiClient = this.apiClient;
      return response.then(async function* (apiResponse: any) {
        for await (const chunk of apiResponse) {
          const resp = generateContentResponseFromMldev(apiClient, chunk);
          let typed_resp = new types.GenerateContentResponse();
          Object.assign(typed_resp, resp);
          yield typed_resp;
        }
      });
    }
  }

  async embedContent(
    model: string,
    contents: types.ContentListUnion,
    config?: types.EmbedContentConfig,
  ): Promise<types.EmbedContentResponse> {
    let response: Promise<types.EmbedContentResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['contents'] = contents;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = embedContentParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{model}:predict', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.EmbedContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = embedContentResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.EmbedContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = embedContentParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{model}:batchEmbedContents', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.EmbedContentResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = embedContentResponseFromMldev(this.apiClient, apiResponse);
        let typed_resp = new types.EmbedContentResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }

  async generateImages(
    model: string,
    prompt: string,
    config?: types.GenerateImagesConfig,
  ): Promise<types.GenerateImagesResponse> {
    let response: Promise<types.GenerateImagesResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['prompt'] = prompt;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = generateImagesParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{model}:predict', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.GenerateImagesResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = generateImagesResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.GenerateImagesResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = generateImagesParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{model}:predict', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.GenerateImagesResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = generateImagesResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.GenerateImagesResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }

  /**
   * Counts the number of tokens in the given contents.
   *
   * @param model - The model to use for counting tokens.
   * @param contents - The contents to count tokens for.
   *                                      Multimodal input is supported for
   *                                      Gemini models.
   * @param [config] - The config for counting tokens.
   * @return The response from the API.
   *
   * @example
   * ```ts
   * const response = await client.models.countTokens(
   *  'gemini-1.5-flash',
   *  'The quick brown fox jumps over the lazy dog.'
   * );
   * console.log(response);
   * ```
   */
  async countTokens(
    model: string,
    contents: types.ContentListUnion,
    config?: types.CountTokensConfig,
  ): Promise<types.CountTokensResponse> {
    let response: Promise<types.CountTokensResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['contents'] = contents;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = countTokensParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{model}:countTokens', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.CountTokensResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = countTokensResponseFromVertex(this.apiClient, apiResponse);
        let typed_resp = new types.CountTokensResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = countTokensParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{model}:countTokens', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.CountTokensResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = countTokensResponseFromMldev(this.apiClient, apiResponse);
        let typed_resp = new types.CountTokensResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }

  async computeTokens(
    model: string,
    contents: types.ContentListUnion,
    config?: types.ComputeTokensConfig,
  ): Promise<types.ComputeTokensResponse> {
    let response: Promise<types.ComputeTokensResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['model'] = model;
    kwargs['contents'] = contents;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = computeTokensParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{model}:computeTokens', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.ComputeTokensResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = computeTokensResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.ComputeTokensResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = computeTokensParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('None', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.post(
        path,
        body,
        types.ComputeTokensResponse,
        config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = computeTokensResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        let typed_resp = new types.ComputeTokensResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }
}

function partToMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {
    throw new Error('videoMetadata parameter is not supported in Gemini API.');
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

function partToVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

/** @internal */
export function contentToMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

/** @internal */
export function contentToVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

function schemaToMldev(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['minItems']) !== undefined) {
    throw new Error('minItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['example']) !== undefined) {
    throw new Error('example parameter is not supported in Gemini API.');
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {
    throw new Error('pattern parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minimum']) !== undefined) {
    throw new Error('minimum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['default']) !== undefined) {
    throw new Error('default parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['anyOf']) !== undefined) {
    throw new Error('anyOf parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {
    throw new Error('maxLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['title']) !== undefined) {
    throw new Error('title parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {
    throw new Error('minLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {
    throw new Error('minProperties parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxItems']) !== undefined) {
    throw new Error('maxItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maximum']) !== undefined) {
    throw new Error('maximum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['nullable']) !== undefined) {
    throw new Error('nullable parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {
    throw new Error('maxProperties parameter is not supported in Gemini API.');
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function schemaToVertex(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);
  if (fromMinItems !== undefined) {
    common.setValueByPath(toObject, ['minItems'], fromMinItems);
  }

  const fromExample = common.getValueByPath(fromObject, ['example']);
  if (fromExample !== undefined) {
    common.setValueByPath(toObject, ['example'], fromExample);
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  const fromPattern = common.getValueByPath(fromObject, ['pattern']);
  if (fromPattern !== undefined) {
    common.setValueByPath(toObject, ['pattern'], fromPattern);
  }

  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);
  if (fromMinimum !== undefined) {
    common.setValueByPath(toObject, ['minimum'], fromMinimum);
  }

  const fromDefault = common.getValueByPath(fromObject, ['default']);
  if (fromDefault !== undefined) {
    common.setValueByPath(toObject, ['default'], fromDefault);
  }

  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);
  if (fromAnyOf !== undefined) {
    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);
  }

  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);
  if (fromMaxLength !== undefined) {
    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (fromTitle !== undefined) {
    common.setValueByPath(toObject, ['title'], fromTitle);
  }

  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);
  if (fromMinLength !== undefined) {
    common.setValueByPath(toObject, ['minLength'], fromMinLength);
  }

  const fromMinProperties = common.getValueByPath(fromObject, [
    'minProperties',
  ]);
  if (fromMinProperties !== undefined) {
    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);
  }

  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);
  if (fromMaxItems !== undefined) {
    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);
  }

  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);
  if (fromMaximum !== undefined) {
    common.setValueByPath(toObject, ['maximum'], fromMaximum);
  }

  const fromNullable = common.getValueByPath(fromObject, ['nullable']);
  if (fromNullable !== undefined) {
    common.setValueByPath(toObject, ['nullable'], fromNullable);
  }

  const fromMaxProperties = common.getValueByPath(fromObject, [
    'maxProperties',
  ]);
  if (fromMaxProperties !== undefined) {
    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function safetySettingToMldev(
  apiClient: ApiClient,
  fromObject: types.SafetySetting,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['method']) !== undefined) {
    throw new Error('method parameter is not supported in Gemini API.');
  }

  const fromCategory = common.getValueByPath(fromObject, ['category']);
  if (fromCategory !== undefined) {
    common.setValueByPath(toObject, ['category'], fromCategory);
  }

  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);
  if (fromThreshold !== undefined) {
    common.setValueByPath(toObject, ['threshold'], fromThreshold);
  }

  return toObject;
}

function safetySettingToVertex(
  apiClient: ApiClient,
  fromObject: types.SafetySetting,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMethod = common.getValueByPath(fromObject, ['method']);
  if (fromMethod !== undefined) {
    common.setValueByPath(toObject, ['method'], fromMethod);
  }

  const fromCategory = common.getValueByPath(fromObject, ['category']);
  if (fromCategory !== undefined) {
    common.setValueByPath(toObject, ['category'], fromCategory);
  }

  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);
  if (fromThreshold !== undefined) {
    common.setValueByPath(toObject, ['threshold'], fromThreshold);
  }

  return toObject;
}

function functionDeclarationToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['response']) !== undefined) {
    throw new Error('response parameter is not supported in Gemini API.');
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function functionDeclarationToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromResponse = common.getValueByPath(fromObject, ['response']);
  if (fromResponse !== undefined) {
    common.setValueByPath(
      toObject,
      ['response'],
      schemaToVertex(apiClient, fromResponse, toObject),
    );
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function googleSearchToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function googleSearchToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function dynamicRetrievalConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function dynamicRetrievalConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function googleSearchRetrievalToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToMldev(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function googleSearchRetrievalToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToVertex(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

/** @internal */
export function toolToMldev(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations!.map((item: any) => {
        return functionDeclarationToMldev(apiClient, item, toObject);
      }),
    );
  }

  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {
    throw new Error('retrieval parameter is not supported in Gemini API.');
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToMldev(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToMldev(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

/** @internal */
export function toolToVertex(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations!.map((item: any) => {
        return functionDeclarationToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);
  if (fromRetrieval !== undefined) {
    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToVertex(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval !== undefined) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToVertex(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

function functionCallingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames !== undefined) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function functionCallingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames !== undefined) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function toolConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToMldev(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function toolConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToVertex(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function prebuiltVoiceConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.PrebuiltVoiceConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);
  if (fromVoiceName !== undefined) {
    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);
  }

  return toObject;
}

function prebuiltVoiceConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.PrebuiltVoiceConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);
  if (fromVoiceName !== undefined) {
    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);
  }

  return toObject;
}

function voiceConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.VoiceConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [
    'prebuiltVoiceConfig',
  ]);
  if (fromPrebuiltVoiceConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['prebuiltVoiceConfig'],
      prebuiltVoiceConfigToMldev(apiClient, fromPrebuiltVoiceConfig, toObject),
    );
  }

  return toObject;
}

function voiceConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.VoiceConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [
    'prebuiltVoiceConfig',
  ]);
  if (fromPrebuiltVoiceConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['prebuiltVoiceConfig'],
      prebuiltVoiceConfigToVertex(apiClient, fromPrebuiltVoiceConfig, toObject),
    );
  }

  return toObject;
}

function speechConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.SpeechConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);
  if (fromVoiceConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['voiceConfig'],
      voiceConfigToMldev(apiClient, fromVoiceConfig, toObject),
    );
  }

  return toObject;
}

function speechConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.SpeechConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);
  if (fromVoiceConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['voiceConfig'],
      voiceConfigToVertex(apiClient, fromVoiceConfig, toObject),
    );
  }

  return toObject;
}

function thinkingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ThinkingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromIncludeThoughts = common.getValueByPath(fromObject, [
    'includeThoughts',
  ]);
  if (fromIncludeThoughts !== undefined) {
    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);
  }

  return toObject;
}

function thinkingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ThinkingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromIncludeThoughts = common.getValueByPath(fromObject, [
    'includeThoughts',
  ]);
  if (fromIncludeThoughts !== undefined) {
    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);
  }

  return toObject;
}

function generateContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToMldev(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);
  if (fromTemperature !== undefined) {
    common.setValueByPath(toObject, ['temperature'], fromTemperature);
  }

  const fromTopP = common.getValueByPath(fromObject, ['topP']);
  if (fromTopP !== undefined) {
    common.setValueByPath(toObject, ['topP'], fromTopP);
  }

  const fromTopK = common.getValueByPath(fromObject, ['topK']);
  if (fromTopK !== undefined) {
    common.setValueByPath(toObject, ['topK'], fromTopK);
  }

  const fromCandidateCount = common.getValueByPath(fromObject, [
    'candidateCount',
  ]);
  if (fromCandidateCount !== undefined) {
    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);
  }

  const fromMaxOutputTokens = common.getValueByPath(fromObject, [
    'maxOutputTokens',
  ]);
  if (fromMaxOutputTokens !== undefined) {
    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);
  }

  const fromStopSequences = common.getValueByPath(fromObject, [
    'stopSequences',
  ]);
  if (fromStopSequences !== undefined) {
    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);
  }

  const fromResponseLogprobs = common.getValueByPath(fromObject, [
    'responseLogprobs',
  ]);
  if (fromResponseLogprobs !== undefined) {
    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);
  }

  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);
  if (fromLogprobs !== undefined) {
    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);
  }

  const fromPresencePenalty = common.getValueByPath(fromObject, [
    'presencePenalty',
  ]);
  if (fromPresencePenalty !== undefined) {
    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);
  }

  const fromFrequencyPenalty = common.getValueByPath(fromObject, [
    'frequencyPenalty',
  ]);
  if (fromFrequencyPenalty !== undefined) {
    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (fromSeed !== undefined) {
    common.setValueByPath(toObject, ['seed'], fromSeed);
  }

  const fromResponseMimeType = common.getValueByPath(fromObject, [
    'responseMimeType',
  ]);
  if (fromResponseMimeType !== undefined) {
    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);
  }

  const fromResponseSchema = common.getValueByPath(fromObject, [
    'responseSchema',
  ]);
  if (fromResponseSchema !== undefined) {
    common.setValueByPath(
      toObject,
      ['responseSchema'],
      schemaToMldev(
        apiClient,
        t.tSchema(apiClient, fromResponseSchema),
        toObject,
      ),
    );
  }

  if (common.getValueByPath(fromObject, ['routingConfig']) !== undefined) {
    throw new Error('routingConfig parameter is not supported in Gemini API.');
  }

  const fromSafetySettings = common.getValueByPath(fromObject, [
    'safetySettings',
  ]);
  if (parentObject !== undefined && fromSafetySettings !== undefined) {
    common.setValueByPath(
      parentObject,
      ['safetySettings'],
      fromSafetySettings!.map((item: any) => {
        return safetySettingToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      t.tTools(
        apiClient,
        t.tTools(apiClient, fromTools)!.map((item: any) => {
          return toolToMldev(apiClient, t.tTool(apiClient, item), toObject);
        }),
      ),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig !== undefined) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToMldev(apiClient, fromToolConfig, toObject),
    );
  }

  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {
    throw new Error('labels parameter is not supported in Gemini API.');
  }

  const fromCachedContent = common.getValueByPath(fromObject, [
    'cachedContent',
  ]);
  if (parentObject !== undefined && fromCachedContent !== undefined) {
    common.setValueByPath(
      parentObject,
      ['cachedContent'],
      t.tCachedContentName(apiClient, fromCachedContent),
    );
  }

  const fromResponseModalities = common.getValueByPath(fromObject, [
    'responseModalities',
  ]);
  if (fromResponseModalities !== undefined) {
    common.setValueByPath(
      toObject,
      ['responseModalities'],
      fromResponseModalities,
    );
  }

  const fromMediaResolution = common.getValueByPath(fromObject, [
    'mediaResolution',
  ]);
  if (fromMediaResolution !== undefined) {
    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);
  }

  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);
  if (fromSpeechConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['speechConfig'],
      speechConfigToMldev(
        apiClient,
        t.tSpeechConfig(apiClient, fromSpeechConfig),
        toObject,
      ),
    );
  }

  if (common.getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {
    throw new Error('audioTimestamp parameter is not supported in Gemini API.');
  }

  const fromThinkingConfig = common.getValueByPath(fromObject, [
    'thinkingConfig',
  ]);
  if (fromThinkingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['thinkingConfig'],
      thinkingConfigToMldev(apiClient, fromThinkingConfig, toObject),
    );
  }

  return toObject;
}

function generateContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);
  if (fromTemperature !== undefined) {
    common.setValueByPath(toObject, ['temperature'], fromTemperature);
  }

  const fromTopP = common.getValueByPath(fromObject, ['topP']);
  if (fromTopP !== undefined) {
    common.setValueByPath(toObject, ['topP'], fromTopP);
  }

  const fromTopK = common.getValueByPath(fromObject, ['topK']);
  if (fromTopK !== undefined) {
    common.setValueByPath(toObject, ['topK'], fromTopK);
  }

  const fromCandidateCount = common.getValueByPath(fromObject, [
    'candidateCount',
  ]);
  if (fromCandidateCount !== undefined) {
    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);
  }

  const fromMaxOutputTokens = common.getValueByPath(fromObject, [
    'maxOutputTokens',
  ]);
  if (fromMaxOutputTokens !== undefined) {
    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);
  }

  const fromStopSequences = common.getValueByPath(fromObject, [
    'stopSequences',
  ]);
  if (fromStopSequences !== undefined) {
    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);
  }

  const fromResponseLogprobs = common.getValueByPath(fromObject, [
    'responseLogprobs',
  ]);
  if (fromResponseLogprobs !== undefined) {
    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);
  }

  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);
  if (fromLogprobs !== undefined) {
    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);
  }

  const fromPresencePenalty = common.getValueByPath(fromObject, [
    'presencePenalty',
  ]);
  if (fromPresencePenalty !== undefined) {
    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);
  }

  const fromFrequencyPenalty = common.getValueByPath(fromObject, [
    'frequencyPenalty',
  ]);
  if (fromFrequencyPenalty !== undefined) {
    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (fromSeed !== undefined) {
    common.setValueByPath(toObject, ['seed'], fromSeed);
  }

  const fromResponseMimeType = common.getValueByPath(fromObject, [
    'responseMimeType',
  ]);
  if (fromResponseMimeType !== undefined) {
    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);
  }

  const fromResponseSchema = common.getValueByPath(fromObject, [
    'responseSchema',
  ]);
  if (fromResponseSchema !== undefined) {
    common.setValueByPath(
      toObject,
      ['responseSchema'],
      schemaToVertex(
        apiClient,
        t.tSchema(apiClient, fromResponseSchema),
        toObject,
      ),
    );
  }

  const fromRoutingConfig = common.getValueByPath(fromObject, [
    'routingConfig',
  ]);
  if (fromRoutingConfig !== undefined) {
    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);
  }

  const fromSafetySettings = common.getValueByPath(fromObject, [
    'safetySettings',
  ]);
  if (parentObject !== undefined && fromSafetySettings !== undefined) {
    common.setValueByPath(
      parentObject,
      ['safetySettings'],
      fromSafetySettings!.map((item: any) => {
        return safetySettingToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      t.tTools(
        apiClient,
        t.tTools(apiClient, fromTools)!.map((item: any) => {
          return toolToVertex(apiClient, t.tTool(apiClient, item), toObject);
        }),
      ),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig !== undefined) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToVertex(apiClient, fromToolConfig, toObject),
    );
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (parentObject !== undefined && fromLabels !== undefined) {
    common.setValueByPath(parentObject, ['labels'], fromLabels);
  }

  const fromCachedContent = common.getValueByPath(fromObject, [
    'cachedContent',
  ]);
  if (parentObject !== undefined && fromCachedContent !== undefined) {
    common.setValueByPath(
      parentObject,
      ['cachedContent'],
      t.tCachedContentName(apiClient, fromCachedContent),
    );
  }

  const fromResponseModalities = common.getValueByPath(fromObject, [
    'responseModalities',
  ]);
  if (fromResponseModalities !== undefined) {
    common.setValueByPath(
      toObject,
      ['responseModalities'],
      fromResponseModalities,
    );
  }

  const fromMediaResolution = common.getValueByPath(fromObject, [
    'mediaResolution',
  ]);
  if (fromMediaResolution !== undefined) {
    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);
  }

  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);
  if (fromSpeechConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['speechConfig'],
      speechConfigToVertex(
        apiClient,
        t.tSpeechConfig(apiClient, fromSpeechConfig),
        toObject,
      ),
    );
  }

  const fromAudioTimestamp = common.getValueByPath(fromObject, [
    'audioTimestamp',
  ]);
  if (fromAudioTimestamp !== undefined) {
    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);
  }

  const fromThinkingConfig = common.getValueByPath(fromObject, [
    'thinkingConfig',
  ]);
  if (fromThinkingConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['thinkingConfig'],
      thinkingConfigToVertex(apiClient, fromThinkingConfig, toObject),
    );
  }

  return toObject;
}

function generateContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToMldev(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['generationConfig'],
      generateContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function generateContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToVertex(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['generationConfig'],
      generateContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function embedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);
  if (parentObject !== undefined && fromTaskType !== undefined) {
    common.setValueByPath(
      parentObject,
      ['requests[]', 'taskType'],
      fromTaskType,
    );
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (parentObject !== undefined && fromTitle !== undefined) {
    common.setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);
  }

  const fromOutputDimensionality = common.getValueByPath(fromObject, [
    'outputDimensionality',
  ]);
  if (parentObject !== undefined && fromOutputDimensionality !== undefined) {
    common.setValueByPath(
      parentObject,
      ['requests[]', 'outputDimensionality'],
      fromOutputDimensionality,
    );
  }

  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {
    throw new Error('mimeType parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['autoTruncate']) !== undefined) {
    throw new Error('autoTruncate parameter is not supported in Gemini API.');
  }

  return toObject;
}

function embedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);
  if (parentObject !== undefined && fromTaskType !== undefined) {
    common.setValueByPath(
      parentObject,
      ['instances[]', 'task_type'],
      fromTaskType,
    );
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (parentObject !== undefined && fromTitle !== undefined) {
    common.setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);
  }

  const fromOutputDimensionality = common.getValueByPath(fromObject, [
    'outputDimensionality',
  ]);
  if (parentObject !== undefined && fromOutputDimensionality !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputDimensionality'],
      fromOutputDimensionality,
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (parentObject !== undefined && fromMimeType !== undefined) {
    common.setValueByPath(
      parentObject,
      ['instances[]', 'mimeType'],
      fromMimeType,
    );
  }

  const fromAutoTruncate = common.getValueByPath(fromObject, ['autoTruncate']);
  if (parentObject !== undefined && fromAutoTruncate !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'autoTruncate'],
      fromAutoTruncate,
    );
  }

  return toObject;
}

function embedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['requests[]', 'content'],
      t.tContentsForEmbed(apiClient, fromContents),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      embedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  const fromModelForEmbedContent = common.getValueByPath(fromObject, ['model']);
  if (fromModelForEmbedContent !== undefined) {
    common.setValueByPath(
      toObject,
      ['requests[]', 'model'],
      t.tModel(apiClient, fromModelForEmbedContent),
    );
  }
  return toObject;
}

function embedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['instances[]', 'content'],
      t.tContentsForEmbed(apiClient, fromContents),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      embedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function generateImagesConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {
    throw new Error('outputGcsUri parameter is not supported in Gemini API.');
  }

  const fromNegativePrompt = common.getValueByPath(fromObject, [
    'negativePrompt',
  ]);
  if (parentObject !== undefined && fromNegativePrompt !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'negativePrompt'],
      fromNegativePrompt,
    );
  }

  const fromNumberOfImages = common.getValueByPath(fromObject, [
    'numberOfImages',
  ]);
  if (parentObject !== undefined && fromNumberOfImages !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfImages,
    );
  }

  const fromGuidanceScale = common.getValueByPath(fromObject, [
    'guidanceScale',
  ]);
  if (parentObject !== undefined && fromGuidanceScale !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'guidanceScale'],
      fromGuidanceScale,
    );
  }

  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {
    throw new Error('seed parameter is not supported in Gemini API.');
  }

  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [
    'safetyFilterLevel',
  ]);
  if (parentObject !== undefined && fromSafetyFilterLevel !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'safetySetting'],
      fromSafetyFilterLevel,
    );
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [
    'includeSafetyAttributes',
  ]);
  if (parentObject !== undefined && fromIncludeSafetyAttributes !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeSafetyAttributes'],
      fromIncludeSafetyAttributes,
    );
  }

  const fromIncludeRaiReason = common.getValueByPath(fromObject, [
    'includeRaiReason',
  ]);
  if (parentObject !== undefined && fromIncludeRaiReason !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeRaiReason'],
      fromIncludeRaiReason,
    );
  }

  const fromLanguage = common.getValueByPath(fromObject, ['language']);
  if (parentObject !== undefined && fromLanguage !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'language'],
      fromLanguage,
    );
  }

  const fromOutputMimeType = common.getValueByPath(fromObject, [
    'outputMimeType',
  ]);
  if (parentObject !== undefined && fromOutputMimeType !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'mimeType'],
      fromOutputMimeType,
    );
  }

  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [
    'outputCompressionQuality',
  ]);
  if (
    parentObject !== undefined &&
    fromOutputCompressionQuality !== undefined
  ) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'compressionQuality'],
      fromOutputCompressionQuality,
    );
  }

  if (common.getValueByPath(fromObject, ['addWatermark']) !== undefined) {
    throw new Error('addWatermark parameter is not supported in Gemini API.');
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  if (common.getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {
    throw new Error('enhancePrompt parameter is not supported in Gemini API.');
  }

  return toObject;
}

function generateImagesConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);
  if (parentObject !== undefined && fromOutputGcsUri !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'storageUri'],
      fromOutputGcsUri,
    );
  }

  const fromNegativePrompt = common.getValueByPath(fromObject, [
    'negativePrompt',
  ]);
  if (parentObject !== undefined && fromNegativePrompt !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'negativePrompt'],
      fromNegativePrompt,
    );
  }

  const fromNumberOfImages = common.getValueByPath(fromObject, [
    'numberOfImages',
  ]);
  if (parentObject !== undefined && fromNumberOfImages !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfImages,
    );
  }

  const fromGuidanceScale = common.getValueByPath(fromObject, [
    'guidanceScale',
  ]);
  if (parentObject !== undefined && fromGuidanceScale !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'guidanceScale'],
      fromGuidanceScale,
    );
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (parentObject !== undefined && fromSeed !== undefined) {
    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);
  }

  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [
    'safetyFilterLevel',
  ]);
  if (parentObject !== undefined && fromSafetyFilterLevel !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'safetySetting'],
      fromSafetyFilterLevel,
    );
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [
    'includeSafetyAttributes',
  ]);
  if (parentObject !== undefined && fromIncludeSafetyAttributes !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeSafetyAttributes'],
      fromIncludeSafetyAttributes,
    );
  }

  const fromIncludeRaiReason = common.getValueByPath(fromObject, [
    'includeRaiReason',
  ]);
  if (parentObject !== undefined && fromIncludeRaiReason !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeRaiReason'],
      fromIncludeRaiReason,
    );
  }

  const fromLanguage = common.getValueByPath(fromObject, ['language']);
  if (parentObject !== undefined && fromLanguage !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'language'],
      fromLanguage,
    );
  }

  const fromOutputMimeType = common.getValueByPath(fromObject, [
    'outputMimeType',
  ]);
  if (parentObject !== undefined && fromOutputMimeType !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'mimeType'],
      fromOutputMimeType,
    );
  }

  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [
    'outputCompressionQuality',
  ]);
  if (
    parentObject !== undefined &&
    fromOutputCompressionQuality !== undefined
  ) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'compressionQuality'],
      fromOutputCompressionQuality,
    );
  }

  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);
  if (parentObject !== undefined && fromAddWatermark !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'addWatermark'],
      fromAddWatermark,
    );
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  const fromEnhancePrompt = common.getValueByPath(fromObject, [
    'enhancePrompt',
  ]);
  if (parentObject !== undefined && fromEnhancePrompt !== undefined) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'enhancePrompt'],
      fromEnhancePrompt,
    );
  }

  return toObject;
}

function generateImagesParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt !== undefined) {
    common.setValueByPath(toObject, ['instances', 'prompt'], fromPrompt);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateImagesConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function generateImagesParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt !== undefined) {
    common.setValueByPath(toObject, ['instances', 'prompt'], fromPrompt);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateImagesConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function countTokensConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['generateContentRequest', 'systemInstruction'],
      contentToMldev(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['generateContentRequest', 'tools'],
      fromTools!.map((item: any) => {
        return toolToMldev(apiClient, item, toObject);
      }),
    );
  }

  if (common.getValueByPath(fromObject, ['generationConfig']) !== undefined) {
    throw new Error(
      'generationConfig parameter is not supported in Gemini API.',
    );
  }

  return toObject;
}

function countTokensConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction !== undefined) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools !== undefined) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      fromTools!.map((item: any) => {
        return toolToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromGenerationConfig = common.getValueByPath(fromObject, [
    'generationConfig',
  ]);
  if (parentObject !== undefined && fromGenerationConfig !== undefined) {
    common.setValueByPath(
      parentObject,
      ['generationConfig'],
      fromGenerationConfig,
    );
  }

  return toObject;
}

function countTokensParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToMldev(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      countTokensConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function countTokensParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToVertex(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      countTokensConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function computeTokensParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  if (common.getValueByPath(fromObject, ['contents']) !== undefined) {
    throw new Error('contents parameter is not supported in Gemini API.');
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function computeTokensParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents !== undefined) {
    common.setValueByPath(
      toObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents)!.map((item: any) => {
          return contentToVertex(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function partFromMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

function partFromVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult !== undefined) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

/** @internal */
export function contentFromMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partFromMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

/** @internal */
export function contentFromVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts!.map((item: any) => {
        return partFromVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

function citationMetadataFromMldev(
  apiClient: ApiClient,
  fromObject: types.CitationMetadata,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromCitations = common.getValueByPath(fromObject, ['citationSources']);
  if (fromCitations !== undefined) {
    common.setValueByPath(toObject, ['citations'], fromCitations);
  }

  return toObject;
}

function citationMetadataFromVertex(
  apiClient: ApiClient,
  fromObject: types.CitationMetadata,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromCitations = common.getValueByPath(fromObject, ['citations']);
  if (fromCitations !== undefined) {
    common.setValueByPath(toObject, ['citations'], fromCitations);
  }

  return toObject;
}

function candidateFromMldev(
  apiClient: ApiClient,
  fromObject: types.Candidate,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromContent = common.getValueByPath(fromObject, ['content']);
  if (fromContent !== undefined) {
    common.setValueByPath(
      toObject,
      ['content'],
      contentFromMldev(apiClient, fromContent, toObject),
    );
  }

  const fromCitationMetadata = common.getValueByPath(fromObject, [
    'citationMetadata',
  ]);
  if (fromCitationMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['citationMetadata'],
      citationMetadataFromMldev(apiClient, fromCitationMetadata, toObject),
    );
  }

  const fromTokenCount = common.getValueByPath(fromObject, ['tokenCount']);
  if (fromTokenCount !== undefined) {
    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);
  }

  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);
  if (fromAvgLogprobs !== undefined) {
    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);
  }

  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);
  if (fromFinishReason !== undefined) {
    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);
  }

  const fromGroundingMetadata = common.getValueByPath(fromObject, [
    'groundingMetadata',
  ]);
  if (fromGroundingMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['groundingMetadata'],
      fromGroundingMetadata,
    );
  }

  const fromIndex = common.getValueByPath(fromObject, ['index']);
  if (fromIndex !== undefined) {
    common.setValueByPath(toObject, ['index'], fromIndex);
  }

  const fromLogprobsResult = common.getValueByPath(fromObject, [
    'logprobsResult',
  ]);
  if (fromLogprobsResult !== undefined) {
    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);
  }

  const fromSafetyRatings = common.getValueByPath(fromObject, [
    'safetyRatings',
  ]);
  if (fromSafetyRatings !== undefined) {
    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);
  }

  return toObject;
}

function candidateFromVertex(
  apiClient: ApiClient,
  fromObject: types.Candidate,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromContent = common.getValueByPath(fromObject, ['content']);
  if (fromContent !== undefined) {
    common.setValueByPath(
      toObject,
      ['content'],
      contentFromVertex(apiClient, fromContent, toObject),
    );
  }

  const fromCitationMetadata = common.getValueByPath(fromObject, [
    'citationMetadata',
  ]);
  if (fromCitationMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['citationMetadata'],
      citationMetadataFromVertex(apiClient, fromCitationMetadata, toObject),
    );
  }

  const fromFinishMessage = common.getValueByPath(fromObject, [
    'finishMessage',
  ]);
  if (fromFinishMessage !== undefined) {
    common.setValueByPath(toObject, ['finishMessage'], fromFinishMessage);
  }

  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);
  if (fromAvgLogprobs !== undefined) {
    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);
  }

  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);
  if (fromFinishReason !== undefined) {
    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);
  }

  const fromGroundingMetadata = common.getValueByPath(fromObject, [
    'groundingMetadata',
  ]);
  if (fromGroundingMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['groundingMetadata'],
      fromGroundingMetadata,
    );
  }

  const fromIndex = common.getValueByPath(fromObject, ['index']);
  if (fromIndex !== undefined) {
    common.setValueByPath(toObject, ['index'], fromIndex);
  }

  const fromLogprobsResult = common.getValueByPath(fromObject, [
    'logprobsResult',
  ]);
  if (fromLogprobsResult !== undefined) {
    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);
  }

  const fromSafetyRatings = common.getValueByPath(fromObject, [
    'safetyRatings',
  ]);
  if (fromSafetyRatings !== undefined) {
    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);
  }

  return toObject;
}

function generateContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);
  if (fromCandidates !== undefined) {
    common.setValueByPath(
      toObject,
      ['candidates'],
      fromCandidates!.map((item: any) => {
        return candidateFromMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);
  if (fromModelVersion !== undefined) {
    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);
  }

  const fromPromptFeedback = common.getValueByPath(fromObject, [
    'promptFeedback',
  ]);
  if (fromPromptFeedback !== undefined) {
    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function generateContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);
  if (fromCandidates !== undefined) {
    common.setValueByPath(
      toObject,
      ['candidates'],
      fromCandidates!.map((item: any) => {
        return candidateFromVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);
  if (fromModelVersion !== undefined) {
    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);
  }

  const fromPromptFeedback = common.getValueByPath(fromObject, [
    'promptFeedback',
  ]);
  if (fromPromptFeedback !== undefined) {
    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function contentEmbeddingStatisticsFromMldev(
  apiClient: ApiClient,
  fromObject: types.ContentEmbeddingStatistics,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function contentEmbeddingStatisticsFromVertex(
  apiClient: ApiClient,
  fromObject: types.ContentEmbeddingStatistics,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTruncated = common.getValueByPath(fromObject, ['truncated']);
  if (fromTruncated !== undefined) {
    common.setValueByPath(toObject, ['truncated'], fromTruncated);
  }

  const fromTokenCount = common.getValueByPath(fromObject, ['token_count']);
  if (fromTokenCount !== undefined) {
    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);
  }

  return toObject;
}

function contentEmbeddingFromMldev(
  apiClient: ApiClient,
  fromObject: types.ContentEmbedding,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromValues = common.getValueByPath(fromObject, ['values']);
  if (fromValues !== undefined) {
    common.setValueByPath(toObject, ['values'], fromValues);
  }

  return toObject;
}

function contentEmbeddingFromVertex(
  apiClient: ApiClient,
  fromObject: types.ContentEmbedding,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromValues = common.getValueByPath(fromObject, ['values']);
  if (fromValues !== undefined) {
    common.setValueByPath(toObject, ['values'], fromValues);
  }

  const fromStatistics = common.getValueByPath(fromObject, ['statistics']);
  if (fromStatistics !== undefined) {
    common.setValueByPath(
      toObject,
      ['statistics'],
      contentEmbeddingStatisticsFromVertex(apiClient, fromStatistics, toObject),
    );
  }

  return toObject;
}

function embedContentMetadataFromMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentMetadata,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function embedContentMetadataFromVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentMetadata,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromBillableCharacterCount = common.getValueByPath(fromObject, [
    'billableCharacterCount',
  ]);
  if (fromBillableCharacterCount !== undefined) {
    common.setValueByPath(
      toObject,
      ['billableCharacterCount'],
      fromBillableCharacterCount,
    );
  }

  return toObject;
}

function embedContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromEmbeddings = common.getValueByPath(fromObject, ['embeddings']);
  if (fromEmbeddings !== undefined) {
    common.setValueByPath(
      toObject,
      ['embeddings'],
      fromEmbeddings!.map((item: any) => {
        return contentEmbeddingFromMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['metadata'],
      embedContentMetadataFromMldev(apiClient, fromMetadata, toObject),
    );
  }

  return toObject;
}

function embedContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromEmbeddings = common.getValueByPath(fromObject, [
    'predictions[]',
    'embeddings',
  ]);
  if (fromEmbeddings !== undefined) {
    common.setValueByPath(
      toObject,
      ['embeddings'],
      fromEmbeddings!.map((item: any) => {
        return contentEmbeddingFromVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata !== undefined) {
    common.setValueByPath(
      toObject,
      ['metadata'],
      embedContentMetadataFromVertex(apiClient, fromMetadata, toObject),
    );
  }

  return toObject;
}

function imageFromMldev(
  apiClient: ApiClient,
  fromObject: types.Image,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromImageBytes = common.getValueByPath(fromObject, [
    'bytesBase64Encoded',
  ]);
  if (fromImageBytes !== undefined) {
    common.setValueByPath(
      toObject,
      ['imageBytes'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType !== undefined) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

function imageFromVertex(
  apiClient: ApiClient,
  fromObject: types.Image,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
  if (fromGcsUri !== undefined) {
    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);
  }

  const fromImageBytes = common.getValueByPath(fromObject, [
    'bytesBase64Encoded',
  ]);
  if (fromImageBytes !== undefined) {
    common.setValueByPath(
      toObject,
      ['imageBytes'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType !== undefined) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

function generatedImageFromMldev(
  apiClient: ApiClient,
  fromObject: types.GeneratedImage,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromImage = common.getValueByPath(fromObject, ['_self']);
  if (fromImage !== undefined) {
    common.setValueByPath(
      toObject,
      ['image'],
      imageFromMldev(apiClient, fromImage, toObject),
    );
  }

  const fromRaiFilteredReason = common.getValueByPath(fromObject, [
    'raiFilteredReason',
  ]);
  if (fromRaiFilteredReason !== undefined) {
    common.setValueByPath(
      toObject,
      ['raiFilteredReason'],
      fromRaiFilteredReason,
    );
  }

  return toObject;
}

function generatedImageFromVertex(
  apiClient: ApiClient,
  fromObject: types.GeneratedImage,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromImage = common.getValueByPath(fromObject, ['_self']);
  if (fromImage !== undefined) {
    common.setValueByPath(
      toObject,
      ['image'],
      imageFromVertex(apiClient, fromImage, toObject),
    );
  }

  const fromRaiFilteredReason = common.getValueByPath(fromObject, [
    'raiFilteredReason',
  ]);
  if (fromRaiFilteredReason !== undefined) {
    common.setValueByPath(
      toObject,
      ['raiFilteredReason'],
      fromRaiFilteredReason,
    );
  }

  const fromEnhancedPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromEnhancedPrompt !== undefined) {
    common.setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);
  }

  return toObject;
}

function generateImagesResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromGeneratedImages = common.getValueByPath(fromObject, [
    'predictions',
  ]);
  if (fromGeneratedImages !== undefined) {
    common.setValueByPath(
      toObject,
      ['generatedImages'],
      fromGeneratedImages!.map((item: any) => {
        return generatedImageFromMldev(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function generateImagesResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromGeneratedImages = common.getValueByPath(fromObject, [
    'predictions',
  ]);
  if (fromGeneratedImages !== undefined) {
    common.setValueByPath(
      toObject,
      ['generatedImages'],
      fromGeneratedImages!.map((item: any) => {
        return generatedImageFromVertex(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function countTokensResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);
  if (fromTotalTokens !== undefined) {
    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);
  }

  const fromCachedContentTokenCount = common.getValueByPath(fromObject, [
    'cachedContentTokenCount',
  ]);
  if (fromCachedContentTokenCount !== undefined) {
    common.setValueByPath(
      toObject,
      ['cachedContentTokenCount'],
      fromCachedContentTokenCount,
    );
  }

  return toObject;
}

function countTokensResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);
  if (fromTotalTokens !== undefined) {
    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);
  }

  return toObject;
}

function computeTokensResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);
  if (fromTokensInfo !== undefined) {
    common.setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);
  }

  return toObject;
}

function computeTokensResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);
  if (fromTokensInfo !== undefined) {
    common.setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);
  }

  return toObject;
}
